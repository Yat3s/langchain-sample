In case of questions, contact:
DerekBr (Android)
HenryZh (iOS)
Distribution Lists for HxCore
Outlook Hx Platform Partner Announcements (mostly read-only): olx-announce@service.microsoft.com. You may find references for HxCore API changes in this group. If you are not in the group, you could request to join it via this link 
Outlook Shared Shield (reporting bugs): olx-shield@service.microsoft.com
Outlook Hx Platform AskHx (asking integration, design question, and interesting bugs): olx-askhx@service.microsoft.com
For more details about these Distribution Lists, please read: https://olxwiki.com/wiki/CommunicationChannels 

Brief Summary
On Monday, after the forward integrate (see below for definitions, and the Sunday morning section for how you'll notice this is done), look for the latest Weekly fork build for your platform on https://alki.azurewebsites.net/hxCrossPlatform 
NOTE currently hx mc is undergoing a migration to Alki so the above link is out of date (updates to come)
INSTEAD please refer to the hxbot messages in the #android-shield teams channel for the latest hx build, the Outlook Android Shield group will also get an email notification when a new hx build is published
Update the version number in your platform. Follow the ingestion process described at HxCore in the Outlook Mobile source code for both iOS and Android.
Build and verify no client changes are needed, or make them if they are.
Run a test pass to verify nothing has broken. For the first ingestion of the week, test a little bit of everything. For cherry picked changes later in the week, you can test only what has changed.
Publish a PR with these changes.
After this is checked in, keep an eye out for other changes that are cherry picked into HxCore which would cause us to need to ingest again.
How HxCore builds are numbered
HxCore builds use a very regular build numbering system, and reading it can tell you a lot about when and how the build was produced.

The first two groups are always 16.0.
The third group indicates the day the code was built on (or, for a weekly fork, what the third group was when it was last forward integrated). This number is now always 5 digits. The first three digits = 100 + (number of months since the beginning of 2018, Jan 2018 being 1). July 2019 is 19 months after the start of 2018, so builds starting in July 2019 start with 119. The final two digits are the day of that month. For example, a weekly fork started on Friday, July 26, 2019 will get 11926. If it gets forward integrated to a build from Saturday, it will update this third group to 11927.
The fourth group indicates what kind of build it is, and how many builds have happened in that fork. Weekly forks (which we ingest) always begin at 33825, and increment by one from there for each subsequent build. It's rare for this number to go over 33835, as weekly forks or forward integrates will cause the build to get a new third group and reset the fourth group back to 33825.
Terms used
"Tenantoutlookdeviceclients" is the project that HxCore is built out of. Think of this as HxCore's develop branch. We do not ingest directly from this branch.
"Tenantoutlookdeviceclients_[Date]" is a weekly fork of HxCore that we will ingest. Think of this as the weekly dogfood branch we have. This branch is originally cut on Fridays and uses the date that it is cut for the name. For example, the branch cut on July 26, 2019 is 20190726 for the [Date] portion above.
"Forward integrate" is a process that happens on Sunday morning automatically. It essentially brings all changes that happened between the Friday cut and this point into the weekly fork. After this automatic forward integrate on Sunday, it's very unlikely another forward integrate will happen again on a weekly fork, and any further changes will be cherry picked in.
Oloop (also http://oloop  - Corpnet access required) is the build website where you can monitor the internal building of HxCore. Not strictly necessary, but a useful tool if you're waiting for builds and want to see their status. If it doesn't work on Chrome for Mac, try Safari or Edge.
"Dot builds" is the term we use for builds that only increment the fourth group of the build number. These changes are typically 1-2 fixes cherry picked directly into the fork. A forward integrate will bring a change to the third group of build numbers, and will have an unknown, much larger number of changes.
Friday Morning Pacific Time (i.e. the morning of Stage Cut)
(NOTE: There is no action for you on this day)

Every Friday morning, a new HxCore is automatically created. The fork will be assigned the name tenantoutlookdeviceclients_[date] (e.g. on Friday 4/26/2019, the branch name was tenantoutlookdeviceclients_20190426). From that point forward, you can monitor the branch by visiting http://oloop/BuildGroup/Details/[forkname] (e.g. for the week beginning on Monday 4/29/2019, the URL to follow would be http://oloop/BuildGroup/Details/tenantoutlookdeviceclients_20190426 ).

Sunday Morning
(NOTE: There is no action for you on this day)

On Sunday morning, a "forward integrate" automatically occurs and the branch will be automatically updated to the latest tenant build of HxCore (think of the tenant as the develop branch for HxCore). You can see an example of what that looks like in oloop below:
image.png

Specifically, in the above example, the fork was forward integrated to reflect everything that was in build 11626.31453 of the HxCore tenant. You can see what that means by visiting the oloop page that corresponds to the HxCore tenant build at http://oloop/BuildGroup/Details/tenantoutlookdeviceclients  :

image.png

Monday Morning
On Monday morning, the release manager should double-check that the branch has been created, and it has been forward integrated. If they haven't, engage mailto:olx-askhx@service.microsoft.com on root-causing and resolving the issue.

Once the builds are complete, an entry in the #hxcore-releases channel in Teams should be created that will be used to track updates to the fork. Only one entry needs to be made across Android and iOS, so if the other release manager has already made it, you won't need to. The initial entry should look something like this (note how the CL number matches the highest CL listed in the above screenshot as belonging to that build):

image.png

The next thing to do is to go to https://hxmc.azurewebsites.net/CrossPlatform  and monitor whether the fork build has passed automation for your platform. To do this, you can filter down to only the fork that you care about by typing in Weekly [Date] (e.g. Weekly 2019/04/26) in the header of the Fork section (see example below):

image.png
NOTE currently hxmc is in the process of being deprecated, do not refer to the above site for up to date information. When the build has passed automation and is ready to be ingested a message will be released in the #android-shield channel and an email will be sent to the Outlook Android Shield group

In this case, you can see that the latest build has passed automation for iOS but not for Android. You may ignore any Fork labeled Tenant, as those builds are for the main branch that we do not ingest (yet).

The HxCore team should be focused on ensuring that the latest fork build has passed automation on Monday morning but, if you're not seeing progress, you should engage with mailto:olx-ingest@service.microsoft.com to ensure that the automation failure is getting attention.

Initial Ingestion
Once a fork build has passed automation for a given platform, the corresponding release manager is responsible for ingesting it into the Outlook Mobile.

You can get started by following the ingestion process described at HxCore in the Outlook Mobile source code for both iOS and Android. For the first ingestion of the week, this will often require making changes to the source code to match changes that have been made to the HxCore interface in the past week. For the most part, these tend to be straight-forward changes but you may need to engage area owners when/if they are not (and/or you may choose to make a minimal change to get the build to work and then ask the appropriate area owner to re-visit once the initial PR is merged).

The best way to stay up-to-date on the latest changes in HxCore and, in particular, breaking changes that will require code changes to go in with the ingestion, is to join the Outlook Hx Platform Partner Announcements Group . It is recommended that all Release Managers join this Group but it is up to you whether you choose to follow it in your Inbox or just visit when you're RM and see what's happened in the past week by browsing the 'Conversations' tab in SharePoint  that simply takes you to the group archive in OWA .

Once you have the app building again, you should "sanity test" the build by confirming the scenarios described here for iOS or here for Android.

If you want to review the code that is currently checked into the fork, you can go to http://msitresearch/ . Set Collection to devmainoverride_1(office) and Scope to \tenantoutlookdeviceclients_[forkname]. Query can have prefixes like file: for file:objects.xml or def: for the definition of a method.

Daily before Stage Cut
From the point that the initial ingestion is complete until the morning of Stage cut, you should monitor the oloop site for the current fork build (http://oloop/BuildGroup/Details/[forkname], e.g. http://oloop/BuildGroup/Details/tenantoutlookdeviceclients_20190426 ) and see if any new changes have been integrated. If any changes have been integrated then you should follow the ingestion process again, including posting to #hxcore-releases and updating vendor/Hx/version.md or build.gradle (this time, since you're just getting a handful of incremental changes, it likely won't require any code changes and your resulting sanity testing can be minimal).

Daily before production release
Once stage is cut, the process is really no different than before - continue to monitor the appropriate oloop site for the correct fork and, if you see changes, consider if they are important enough to cut a new dogfood build and, if so, go through the ingestion process (though, this time, you will probably have to do the ingestion directly into the appropriate release branch since develop will likely now contain a HxCore build from the following week's fork) and cut a new dogfood build.

If you're in doubt about the importance, risk, and/or impactfulness of a fix feel free to reach out to the engineer that committed it and/or mailto:olx-askhx@service.microsoft.com to learn more.

Monitoring the state of the build
To monitor the state of the build, go to this directory - \\ocentral\teams\HxC\hxbuild\tenantoutlookdeviceclients_[date]. For example, for the 0426 build that is \\ocentral\teams\HxC\hxbuild\tenantoutlookdeviceclients_20190426.

If you see debug, ships, and Logs folders the build is probably done. If not, you can look at the status.txt file which contains a log for each of the build steps. You can compare to the previous build to estimate how much longer the build will take.